diff --git a/bin/lem b/bin/lem
index 2a62dc7c..44b091c0 100755
--- a/bin/lem
+++ b/bin/lem
@@ -51,6 +51,7 @@ def main():
     assess_group = host_assess_subparser.add_mutually_exclusive_group()
     assess_group.add_argument('--yum', action='store_const', dest='type', const='yum', default='yum')
     assess_group.add_argument('--rpm', action='store_const', dest='type', const='rpm')
+    assess_group.add_argument('--pacman', action='store_const', dest='type', const='pacman')
     host_assess_subparser.add_argument('--curation',
                                        required=True,
                                        help='Location of curation data.')
diff --git a/lem/host/__init__.py b/lem/host/__init__.py
index c8bd3594..76b01a8f 100644
--- a/lem/host/__init__.py
+++ b/lem/host/__init__.py
@@ -1,4 +1,5 @@
 from lem.host.assessor import YumAssessor
 from lem.host.assessor import RpmAssessor
+from lem.host.assessor import PacmanAssessor
 from lem.host.patcher import Patcher
 from lem.host.assessor import Rpm
diff --git a/lem/host/assessor.py b/lem/host/assessor.py
index 1b7de88e..bc5af9dc 100644
--- a/lem/host/assessor.py
+++ b/lem/host/assessor.py
@@ -1,14 +1,22 @@
+import abc
 import subprocess
+import sys
 import re
+from redteamcore import FRTLogger
 from cpe import CPE
-import platform
+
+
+RE_CVE = re.compile(r'CVE-\d{4}-\d{4,}')
+
 
 class Assessor(object):
     def __init__(self):
         self.cves = []
+    @abc.abstractmethod
     def assess(self):
         pass
 
+
 class YumAssessor(Assessor):
     def __init__(self):
         super(YumAssessor, self).__init__()
@@ -36,6 +44,7 @@ class YumAssessor(Assessor):
 
         self.cves = list(set(self.cves))
 
+
 class RpmAssessor(Assessor):
     def __init__(self, vuln_data):
         super(RpmAssessor, self).__init__()
@@ -198,4 +207,39 @@ class Rpm(object):
     #     pass
 
 
+class PacmanAssessor(Assessor):
+    def __init__(self):
+        super(PacmanAssessor, self).__init__()
+
+    def assess(self):
+        lines = []
+        # check dependencies
+        has_audit_command = ["/usr/bin/pacman", "-Qi", "arch-audit"]
+        p = subprocess.Popen(has_audit_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        p.communicate()
+        if p.returncode == 1:
+            _msg = "The optional argument --pacman requires arch-audit to be installed. Please install and try again."
+            FRTLogger.error(_msg)
+            sys.exit(1)
+        # find CVEs
+        command = ["arch-audit", "-f", "'%n %c'"]
+        p = subprocess.Popen(command,
+                             stdout=subprocess.PIPE,
+                             stderr=subprocess.PIPE)
+        out, err = p.communicate()
+
+        if p.returncode != 0:
+            raise OSError((p.returncode, err))
+
+        lines = out.split('\n')
 
+        # assume that each line of output has the format "libtiff CVE-2019-7663,CVE-2019-6128"
+        for line in lines:
+            if not line:
+                continue
+            pkgname, cves = line.replace("'", "").split(" ")
+            cves = RE_CVE.findall(cves)
+            if not cves:
+                continue
+            self.cves.extend(cves)
+        self.cves = list(set(self.cves))
diff --git a/lem/main.py b/lem/main.py
index 3f797260..12481553 100755
--- a/lem/main.py
+++ b/lem/main.py
@@ -5,6 +5,7 @@ from redteamcore import FRTLogger
 from lem.vulnerability import VulnerabilityManager
 from lem.host import YumAssessor
 from lem.host import RpmAssessor
+from lem.host import PacmanAssessor
 from lem.host import Patcher
 from lem.score import ScoreManager
 from lem.exploit import CurationManager
@@ -88,13 +89,17 @@ class Lem(object):
         elif self.args.type == 'rpm':
             cves, _ = self.vuln_manager.list_cves()
             assessor = RpmAssessor(cves)
+        elif self.args.type == 'pacman':
+            assessor = PacmanAssessor()
         assessor.assess()
+        FRTLogger.info("Discovered CVEs: {}".format(",".join(assessor.cves)))
+
         output = curation_manager.csv(cves=assessor.cves,
                                       source=self.args.source,
                                       score_kind=self.args.kind,
                                       score_regex=self.args.score,
                                       eid=self.args.id)
-        FRTLogger.info(output)
+        FRTLogger.info("Curated CSV:{}".format(output if output else " Empty"))
         if self.args.save_file:
             self.args.save_file.write(output)
             self.args.save_file.close()
